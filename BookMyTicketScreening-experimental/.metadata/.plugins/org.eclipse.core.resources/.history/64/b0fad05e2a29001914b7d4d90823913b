package com.cg.bookmymovie.screeningservice.testRestController;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertEquals;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.RestTemplate;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class RestControllerTest {
 
    @Autowired
    private TestRestTemplate testRestTemplate;
 
    @LocalServerPort
    int randomServerPort;
    
    @Test
    public void noRestControllerTest() throws Exception {
   
        ResponseEntity<Resource> responseEntity= testRestTemplate.getForEntity("/screenings", Resource.class);
 
        assertEquals(responseEntity.getStatusCode().HttpStatus.NOT_FOUND);
    }
    
    
    @Test
    @Ignore
    public void getMappingDoesNotExistTest() throws Exception {
      
        ResponseEntity<Resource> responseEntity= testRestTemplate.getForEntity("/screenings", Resource.class);

        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    @Test
    @Ignore
    public void getMappingMethodExistButReturnsNullTest() throws Exception {
      
        ResponseEntity<Resource> responseEntity= testRestTemplate.getForEntity("/screenings", Resource.class);

        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    

    @Test
    @Ignore
    public void getMappingExistAndReturnsDataTest() throws URISyntaxException {
		/*
		 * ResponseEntity<List> responseEntity=
		 * testRestTemplate.getForEntity("/screenings", List.class);
		 * 
		 * assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.
		 * INTERNAL_SERVER_ERROR);
		 */
        
    	 RestTemplate restTemplate = new RestTemplate();
        
        final String baseUrl = "http://localhost:" + randomServerPort + "/screenings";
        URI uri = new URI(baseUrl);
     
        ResponseEntity<List> result = restTemplate.getForEntity(uri, List.class);
         
        //Verify request succeed
        Assert.assertEquals(200, result.getStatusCodeValue());
       // Assert.assertEquals(true, result.getBody().contains("employeeList"));
    }
}
