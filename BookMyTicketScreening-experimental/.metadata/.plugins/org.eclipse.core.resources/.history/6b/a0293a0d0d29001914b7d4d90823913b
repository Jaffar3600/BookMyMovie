package com.cg.bookmymovie.screeningservice.testRestController;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class RestControllerTest {
 
    @Autowired
    private TestRestTemplate testRestTemplate;
 
    @Test
    public void invalidUrlTest() throws Exception {
   
        ResponseEntity<Resource> responseEntity= testRestTemplate.getForEntity("/screening", Resource.class);
 
        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    }
    
    
    @Test
    public void getMappingDoesNotExistTest() throws Exception {
      
        ResponseEntity<Resource> responseEntity= testRestTemplate.getForEntity("/screenings", Resource.class);

        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    @Test
    public void getMappingExistTest() throws Exception {
      
        ResponseEntity<Resource> responseEntity= testRestTemplate.getForEntity("/screenings", Resource.class);

        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
